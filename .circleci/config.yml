version: 2.1
commands:
  install_build_env:
    parameters:
      compiler:
        default: gcc-c++
        type: string
    steps:
      - run:
          name: Install build environment
          command: |
            dnf install -y --nodocs 'dnf-command(copr)'
            dnf copr enable -y thofmann/eclipse-clp-6
            dnf install -y --nodocs \
              << parameters.compiler >> \
              boost-devel \
              clang-tools-extra \
              cmake \
              doxygen \
              eclipse-clp-devel \
              git \
              graphviz-devel \
              lcov \
              make \
              protobuf-devel \
              range-v3-devel \
              spdlog-devel
  build:
    steps:
      - run:
          name: Build the project
          command: cmake -B build -DCMAKE_BUILD_TYPE=Debug -DTACOS_GOCOS=ON -DTACOS_BUILD_BENCHMARKS=ON -DTACOS_BUILD_LARGE_BENCHMARKS=ON -DTACOS_CLANG_TIDY=ON && cmake --build build -j 4
  build_release:
    steps:
      - run:
          name: Build with build type 'Release'
          command: cmake -B build -DCMAKE_BUILD_TYPE=Release -DTACOS_GOCOS=ON -DTACOS_BUILD_BENCHMARKS=ON -DTACOS_BUILD_LARGE_BENCHMARKS=ON && cmake --build build -j 4
  test:
    steps:
      - run:
          name: Run tests
          working_directory: build
          command: CTEST_OUTPUT_ON_FAILURE=1 ctest
  build_doc:
    steps:
      - run:
          name: Build documentation
          working_directory: build
          command: make doc
      - persist_to_workspace:
          root: build/api
          paths: html
  generate_coverage:
    steps:
      - run:
          name: Generate coverage report
          command: |
            cmake -B build_coverage -DCMAKE_BUILD_TYPE=Debug -DTACOS_GOCOS=ON -DTACOS_COVERAGE=ON && \
            CTEST_OUTPUT_ON_FAILURE=1 cmake --build build_coverage -j 4 --target coverage && \
            curl -Os https://uploader.codecov.io/latest/linux/codecov && \
            chmod +x codecov && \
            ./codecov -t ${CODECOV_TOKEN}
jobs:
  build_gcc:
    docker:
      - image: fedora:37
    resource_class: large
    steps:
      - install_build_env
      - checkout
      - build
      - test
      - build_doc
  build_release:
    docker:
      - image: fedora:37
    resource_class: large
    steps:
      - install_build_env
      - checkout
      - build_release
      - test
  build_clang:
    docker:
      - image: fedora:37
    resource_class: large
    environment:
      CXX: /usr/bin/clang++
      CC: /usr/bin/clang
    steps:
      - install_build_env:
          compiler: clang
      - checkout
      - build
      - test
  generate_coverage:
    docker:
      - image: fedora:37
    resource_class: large
    steps:
      - install_build_env
      - checkout
      - generate_coverage
  deploy_docs:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: build/api
      - run:
          name: Install dependencies
          command:
            npm install -g --silent gh-pages
      - add_ssh_keys:
          fingerprints:
            - "78:02:22:47:89:7d:e3:76:6d:f3:89:4c:19:59:a0:b6"
      - run:
          name: Deploy docs to gh-pages branch
          command:
            gh-pages --dist build/api/html
            --dest docs
            --user "Build Bot <buildbot@kbsg.rwth-aachen.de>"
            --message "Update doxygen docs"
          environment:
            CACHE_DIR: .gh-pages-cache
workflows:
  build:
    jobs:
      - build_gcc
      - build_clang
      - build_release
      - generate_coverage
      - deploy_docs:
          filters:
            branches:
              only:
                - main
          requires:
            - build_gcc
